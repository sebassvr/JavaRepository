/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ventana;

import java.awt.Color;
import java.awt.Graphics;

/**
 *
 * @author sebassvr
 */
public class Formas extends javax.swing.JFrame {

    /**
     * Creates new form Formas
     */
    public Formas() {
        initComponents();
        this.setBounds(0,0,600,400);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Formas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Formas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Formas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Formas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Formas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
// MÃ©todo para utilizar nuestra clase Graphics.
    
    @Override
    public void paint(Graphics g){
        super.paint(g);
        
        g.setColor(Color.BLUE); // Para establecer el color que vamos a usar apra dibujar.
        // Para dibujar una recta.
        g.drawLine(0, 70, 100, 70); 
        // Para dibujar un rectangulo, cuadrados etc.
        g.drawRect(150, 70, 50, 70);
        // Para dibujar un rectangulo con esquinas redondeadas.
        g.drawRoundRect(250, 70, 50, 70, 6, 6);
        // Para dibujar un ovalo.
        g.drawOval(350, 70, 50, 70);
        
        // Para poder dibujar un triangulo es necesario usar vectores.
        // Cada punto conecta con el otro punto y hace un posicion
        int vectorX[] = {500,550, 450}; // Aqui ingresamos 3 puntos de X.
        int vectorY[] = {70,120,120}; // Aqui ingresamos 3 puntos de Y.
        g.drawPolygon(vectorX, vectorY, 3);
        
        // Ahora para dibujar figuras rellenas de un color.
        g.setColor(Color.GREEN);
        // Para dibujar un rectangulo relleno.
        g.fillRect(150, 270, 50, 70);
        
        // Para dibujar un rectangulo con bordes redondeados relleno.
        g.setColor(Color.MAGENTA);
        g.fillRoundRect(250, 270, 50, 70, 6, 6);
        
        // Para dibujar un ovalo relleno.
        g.setColor(Color.red);
        g.fillOval(350, 270, 50, 70);
        
        // Para dibujar un triangulo, ahora relleno.
        // Creamos los dos vectores con coordenas de x - y.
        int[] vectorX2 = {500,550,450};
        int[] vectorY2 = {270,320,320};
        g.fillPolygon(vectorX2, vectorY2, 3);
        
        
    }



}
